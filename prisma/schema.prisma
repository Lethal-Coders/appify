// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  projects          Project[]
  payments          Payment[]
  subscription      Subscription?
  stripeCustomerId  String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String   @id @default(cuid())
  userId        String
  name          String
  websiteUrl    String
  iconUrl       String?
  splashUrl     String?
  status        String   @default("DRAFT")
  expoProjectId String?
  buildId       String?
  downloadUrl   String?
  isPaid        Boolean  @default(false)
  paymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([userId])
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  amount            Float
  currency          String   @default("usd")
  status            String   @default("pending")
  stripePaymentId   String?  @unique
  stripeSessionId   String?  @unique
  plan              String   // "single", "monthly", "yearly"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]

  @@index([userId])
  @@index([stripePaymentId])
}

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  status                 String   // "active", "canceled", "incomplete", "incomplete_expired", "past_due", "trialing", "unpaid"
  plan                   String   // "monthly", "yearly"
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
